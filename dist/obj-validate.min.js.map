{"version":3,"file":null,"sources":["../src/index.js"],"sourcesContent":["const is = require('samesame')\n\nconst has = function (object, key) {\n  return object && hasOwnProperty.call(object, key)\n}\nexport default function validate (obj = {}, schema = {}) {\n  const errors = {}\n\n  if (!is(obj, schema, 'Object')) {\n    return Promise.reject(new Error('Invalid object or schema provided'))\n  }\n\n  Object.keys(schema).forEach(key => {\n    const prop = schema[key]\n    errors[key] = []\n\n    if (prop.required && !has(obj, key)) {\n      errors[key].push(ReferenceError(`Missing required property ${key}`))\n    }\n\n    if (prop.type && has(obj, key)) {\n      if (Array.isArray(prop.type)) {\n        if (!is(obj[key], ...prop.type)) {\n          errors[key].push(TypeError(`Invalid type. Property ${key} should be ${prop.type}`))\n        }\n      } else if (!is(obj[key], prop.type)) {\n        errors[key].push(TypeError(`Invalid type. Property ${key} should be ${prop.type}`))\n      }\n    }\n\n    if (prop.pattern && prop.pattern instanceof RegExp && has(obj, key)) {\n      if (!obj[key].toString().match(prop.pattern)) {\n        errors[key].push(\n          TypeError(`Invalid value. Property ${key} does not match pattern ${prop.pattern}`)\n        )\n      }\n    }\n  })\n\n  return Promise.resolve(errors)\n}\n"],"names":["const"],"mappings":"i4BAAAA"}
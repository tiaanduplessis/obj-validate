{"version":3,"file":null,"sources":["../src/index.js"],"sourcesContent":["const is = require('samesame')\n\n/**\n * Check if a object contains a given key\n *\n * @param {object} object Object to check for key\n * @param {string} key Key to check for\n *\n * @returns {boolean}\n */\nconst has = function (object = {}, key) {\n  return object && hasOwnProperty.call(object, key)\n}\n\n/**\n * Compare a object to a given schema\n *\n * @param {object} obj Object to compare to schema\n * @param {object} schema Schema to campare object to\n *\n * @returns {array} Array of all errors\n */\nconst validate = function (obj = {}, schema = {}, options = {}) {\n  const errors = []\n\n  if (!is(obj, schema, 'Object')) {\n    throw new Error('Invalid object or schema provided')\n  }\n\n  Object.keys(schema).forEach(key => {\n    const prop = schema[key]\n\n    if (prop.required && !has(obj, key)) {\n      errors.push(ReferenceError(`Missing required property ${key}`))\n    }\n\n    if (prop.type && has(obj, key)) {\n      if (Array.isArray(prop.type)) {\n        if (!is(obj[key], ...prop.type)) {\n          errors.push(TypeError(`Invalid type. Property ${key} should be ${prop.type}`))\n        }\n      } else if (!is(obj[key], prop.type)) {\n        errors.push(TypeError(`Invalid type. Property ${key} should be ${prop.type}`))\n      }\n    }\n\n    if (prop.pattern && prop.pattern instanceof RegExp && has(obj, key)) {\n      if (!obj[key].toString().match(prop.pattern)) {\n        errors.push(\n          TypeError(`Invalid value. Property ${key} does not match pattern ${prop.pattern}`)\n        )\n      }\n    }\n  })\n\n  return errors\n}\n\nexport default validate\n"],"names":["const"],"mappings":"sLAAAA"}